// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 7nHgwVrraRMSqmmz2Z4sMK
// Component: xBpZ8I9Og4
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: 7nHgwVrraRMSqmmz2Z4sMK/projectcss
import sty from "./PlasmicFeature.module.css"; // plasmic-import: xBpZ8I9Og4/css

import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: RctD-kaew/icon

export type PlasmicFeature__VariantMembers = {};
export type PlasmicFeature__VariantsArgs = {};
type VariantPropType = keyof PlasmicFeature__VariantsArgs;
export const PlasmicFeature__VariantProps = new Array<VariantPropType>();

export type PlasmicFeature__ArgsType = {
  title?: string;
  description?: string;
};
type ArgPropType = keyof PlasmicFeature__ArgsType;
export const PlasmicFeature__ArgProps = new Array<ArgPropType>(
  "title",
  "description"
);

export type PlasmicFeature__OverridesType = {
  root?: p.Flex<"div">;
  icon?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  content?: p.Flex<"div">;
  h3?: p.Flex<"h3">;
  p?: p.Flex<"p">;
};

export interface DefaultFeatureProps {
  title?: string;
  description?: string;
  className?: string;
}

function PlasmicFeature__RenderFunc(props: {
  variants: PlasmicFeature__VariantsArgs;
  args: PlasmicFeature__ArgsType;
  overrides: PlasmicFeature__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          title: "Enter your text" as const,
          description: "Lorem ipsum dolor sit amet..." as const
        },
        props.args
      ),
    [props.args]
  );

  const $props = {
    ...args,
    ...variants
  };

  const currentUser = p.useCurrentUser?.() || {};

  return (
    true ? (
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          sty.root
        )}
      >
        <div
          data-plasmic-name={"icon"}
          data-plasmic-override={overrides.icon}
          className={classNames(projectcss.all, sty.icon)}
        >
          <IconIcon
            data-plasmic-name={"svg"}
            data-plasmic-override={overrides.svg}
            className={classNames(projectcss.all, sty.svg)}
            role={"img"}
          />
        </div>

        {true ? (
          <p.Stack
            as={"div"}
            data-plasmic-name={"content"}
            data-plasmic-override={overrides.content}
            hasGap={true}
            className={classNames(projectcss.all, sty.content)}
          >
            <h3
              data-plasmic-name={"h3"}
              data-plasmic-override={overrides.h3}
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3
              )}
            >
              {(() => {
                try {
                  return $props.title;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return "Enter some text";
                  }
                  throw e;
                }
              })()}
            </h3>

            <p
              data-plasmic-name={"p"}
              data-plasmic-override={overrides.p}
              className={classNames(
                projectcss.all,
                projectcss.p,
                projectcss.__wab_text,
                sty.p
              )}
            >
              {(() => {
                try {
                  return $props.description;
                } catch (e) {
                  if (e instanceof TypeError) {
                    return "People say it can run at the same speed as lightning striking, Its icy body is so cold, it will not melt even if it is immersed in magma";
                  }
                  throw e;
                }
              })()}
            </p>
          </p.Stack>
        ) : null}
      </div>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "icon", "svg", "content", "h3", "p"],
  icon: ["icon", "svg"],
  svg: ["svg"],
  content: ["content", "h3", "p"],
  h3: ["h3"],
  p: ["p"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  icon: "div";
  svg: "svg";
  content: "div";
  h3: "h3";
  p: "p";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicFeature__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicFeature__VariantsArgs;
    args?: PlasmicFeature__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicFeature__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicFeature__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFeature__ArgProps,
          internalVariantPropNames: PlasmicFeature__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicFeature__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFeature";
  } else {
    func.displayName = `PlasmicFeature.${nodeName}`;
  }
  return func;
}

export const PlasmicFeature = Object.assign(
  // Top-level PlasmicFeature renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    icon: makeNodeComponent("icon"),
    svg: makeNodeComponent("svg"),
    content: makeNodeComponent("content"),
    h3: makeNodeComponent("h3"),
    p: makeNodeComponent("p"),

    // Metadata about props expected for PlasmicFeature
    internalVariantProps: PlasmicFeature__VariantProps,
    internalArgProps: PlasmicFeature__ArgProps
  }
);

export default PlasmicFeature;
/* prettier-ignore-end */
